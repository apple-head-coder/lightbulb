// Basic lark syntax:
// lowercase names are rules, UPPERCASE names are tokens
// definitions of rules can contain strings, tokens, and other rules
// lark constructs a tree from the rules
// ? before a rule means to not construct a node in the tree for that rule if possible
// | in a rule gives an alternative for the rule
// -> after an alternative gives a different name for that alternative in the tree

?start: statements
      |  -> blank

statements: (statement "&")* statement

?statement: assignment | function_call

assignment: value "$" id

function_call: "(" value ")" "->" value

?value: id -> value_of
      | literal

id: ID

literal: "|" LITERAL_TYPE LITERAL_CONTENT "|"

ID: /[_a-zA-Z][_0-9a-zA-Z]*/
LITERAL_TYPE: /[isb]/
LITERAL_CONTENT: /[^|]+/
WHITESPACE: /[ \t\n]/

%ignore WHITESPACE
