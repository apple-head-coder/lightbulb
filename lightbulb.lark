// Basic lark syntax:
// lowercase names are rules, UPPERCASE names are tokens
// definitions of rules can contain strings, tokens, and other rules
// lark constructs a tree from the rules
// ? before a rule means to not construct a node in the tree for that rule if possible
// | in a rule gives an alternative for the rule
// -> after an alternative gives a different name in the tree

?start: statements
      |  -> blank

statements: (statement "&")* statement

?code_block: "{" statements "}"

?statement: value | assignment | if_statement

assignment: value "$" id

if_statement: "?" "(" value ")" code_block code_block?

cvalues: (value ",")* value?

?value: op_or

?op_or: op_or ":;" op_and | op_and
?op_and: op_and "::" op_not | op_not
?op_not: ";" op_not -> op_not | op_call
?op_call: (paren_value | "(" cvalues ")") ("." id)? "->" op_call | immediate_value

?immediate_value: id -> value_of | literal | paren_value

?paren_value: "(" value ")"

id: ID

literal: "|" LITERAL_TYPE LITERAL_CONTENT? "|"

ID: /([_a-zA-Z]|\^+)[_0-9a-zA-Z]*/
LITERAL_TYPE: /[isb]/
LITERAL_CONTENT: /(?s:(\\.|[^|\\])+)/
WHITESPACE: /[ \t\n]/

%ignore WHITESPACE
